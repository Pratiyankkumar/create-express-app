const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const prisma = require("../db/prismaClient")

const authController = {
  signup: async (req, res) => {
    try {
      const { email, password, name } = req.body;

      // Check if user exists
      const existingUser = await prisma.user.findUnique({
        where: { email }
      });

      if (existingUser) {
        return res.status(400).json({ message: 'User already exists' });
      }

      // Hash password
      const hashedPassword = await bcrypt.hash(password, 10);

      // Create user
      const user = await prisma.user.create({
        data: {
          email,
          password: hashedPassword,
          name
        }
      });

      // Create token
      const token = jwt.sign(
        { userId: user.id },
        "{{jwtSecret}}",
        { expiresIn: '1h' }
      );

      res.status(201).json({
        message: 'User created successfully',
        token
      });
    } catch (error) {
      console.error('Signup error:', error);
      res.status(500).json({ message: 'Error creating user' });
    }
  },

  login: async (req, res) => {
    try {
      const { email, password } = req.body;

      // Find user
      const user = await prisma.user.findUnique({
        where: { email }
      });

      if (!user) {
        return res.status(400).json({ message: 'Invalid credentials' });
      }

      // Check password
      const validPassword = await bcrypt.compare(password, user.password);

      if (!validPassword) {
        return res.status(400).json({ message: 'Invalid credentials' });
      }

      // Create token
      const token = jwt.sign(
        { userId: user.id },
        "{{jwtSecret}}",
        { expiresIn: '1h' }
      );

      res.json({
        message: 'Logged in successfully',
        token
      });
    } catch (error) {
      console.error('Login error:', error);
      res.status(500).json({ message: 'Error logging in' });
    }
  },

  getMe: async (req, res) => {
    try {
      const user = await prisma.user.findUnique({
        where: { id: req.user.id },
        select: {
          id: true,
          email: true,
          name: true,
          createdAt: true
        }
      });

      res.json(user);
    } catch (error) {
      res.status(500).json({ message: 'Error fetching user data' });
    }
  }
};

module.exports = authController;